
business_hours.details = Emphasizes certain time slots on the calendar. By default, Monday-Friday, 9am-5pm. Try switching to the "week" view.\n\n
business_hours.link    = https://fullcalendar.io/docs/businessHours
business_hours.name    = Business hours
business_hours.value   = $.extend(this.cfg.options, {\n    businessHours: {\n        // days of week. an array of zero-based day of week integers (0=Sunday)\n        daysOfWeek: [1, 2, 3, 4],\n        // Monday - Thursday\n\n        startTime: '10:00',\n        // a start time (10am in this example)\n        endTime: '18:00',\n        // an end time (6pm in this example)\n    },\n    initialView: 'timeGridWeek'\n});\n

buttonText.details = Text that will be displayed on buttons of the header/footer.
buttonText.link    = https://fullcalendar.io/docs/buttonText
buttonText.name    = Button text
buttonText.value   = $.extend(this.cfg.options, {\n    buttonText: {\n        today: 'DaHjaj',\n        month: 'jar',\n        week: 'Hogh',\n        day: 'jaj',\n        list: 'chong'\n    }\n});\n

customButtons.details = Defines custom buttons that can be used in the header/footer.
customButtons.link    = https://fullcalendar.io/docs/customButtons
customButtons.name    = Custom buttons
customButtons.value   = $.extend(this.cfg.options, {\n    customButtons: {\n        myCustomButton: {\n            text: 'custom!',\n            click: function() {\n                alert('clicked the custom button!');\n            }\n        }\n    },\n    headerToolbar: {\n        start: 'prev,next today myCustomButton',\n        center: 'title',\n        end: 'dayGridMonth,timeGridWeek,timeGridDay'\n    }\n});\n

event_allow.details = Limits user selection to certain windows of time. This example adds a constraint that prevents events the user from dropping an event so that it its start and end date lie on different days.\n\n<br><br>\n\nPlease note that events with a duration of longer that one day are always editable in this example.
event_allow.link    = https://fullcalendar.io/docs/eventAllow
event_allow.name    = Event allow (force same day)
event_allow.value   = var MillisecondsInDay = 24 * 60 * 60 * 1000;\n\n$.extend(this.cfg.options, {\n    eventAllow: function(dropInfo, draggedEvent) {\n        var duration = dropInfo.end.getTime() - dropInfo.start.getTime();      \n        var sameDay = dropInfo.start.getFullYear() === dropInfo.end.getFullYear()\n          && dropInfo.start.getMonth() === dropInfo.end.getMonth()\n          && dropInfo.start.getDay() === dropInfo.end.getDay();\n        var endOnMidnight = dropInfo.end.getHours() === 0\n          && dropInfo.end.getMinutes() === 0\n          && dropInfo.end.getSeconds() === 0\n          && dropInfo.end.getMilliseconds() === 0;\n        return duration > MillisecondsInDay || sameDay || endOnMidnight;\n    },\n    initialView: 'timeGridWeek'\n});

event_render.details = "eventRender" is triggered while an event is being rendered. A hook for modifying its DOM. This examples demonstrates how you can add delete a button to the events.
event_render.html    = <style>\nbody .fc .fc-event:hover .fc-remove {\n  opacity: 1;\n}\n\nbody .fc .fc-event .fc-remove {\n  opacity: 0;\n  transition: 0.3s opacity, 0.3s transform;\n  position: absolute;\n  color: #fff;\n  font-size: 14px;\n  font-weight: bold;\n  text-align: center;\n  top: 3px;\n  right: 3px;\n  width: 14px;\n  height: 14px;\n  z-index: 10;\n}\n\nbody .fc .fc-event .fc-remove:hover {\n  cursor: grabbing;\n  transform: scale(1.2);\n}\n</style>
event_render.link    = https://fullcalendar.io/docs/eventRender
event_render.name    = Event render (delete button)
event_render.value   = this.cfg.options.initialView = 'timeGridWeek';\n\napplyRemoveButton(this, {\n    deleteCallback: function(eventId) {\n        deleteEvent([\n            { name: 'eventId', value: eventId }\n        ]);\n    },\n    deleteTitle: 'Delete this event',\n});\n\n/**\n * And eventRender callback that appends a delete button (span element) to each rendered event.\n * @param {PrimeFaces.Widget.Schedule} widget \n * @param {{deleteCallback: (id: string) => void, deletetitle: string}} options \n */\nfunction applyRemoveButton(widget, options) {\n    widget.cfg.options.eventDidMount = function(data) {\n        var deleteCallback = options.deleteCallback;\n        if (deleteCallback) {\n            var $el = $(data.el);\n            var $removeBtn = $('<span class="fc-remove pi pi-times"></span>');\n            $removeBtn.attr("title", options.deleteTitle || "");\n            if (data.event.textColor) {\n                $removeBtn.css("color", data.event.textColor);\n            }\n            $el.append($removeBtn);\n            $removeBtn.on("click", function() {\n                // Update UI immediately\n                data.event.remove();\n                // Sync with server\n                deleteCallback(data.event.id);\n            });\n        }\n    }\n}\n

now_indicator.details = Whether or not to display a marker indicating the current time. Try switching to the "week" or "day" view and scroll to the current time.
now_indicator.link    = https://fullcalendar.io/docs/nowIndicator
now_indicator.name    = Now indicator
now_indicator.value   = $.extend(this.cfg.options, {\n    nowIndicator: true,\n    initialView: 'timeGridWeek'\n});\n

week_numbers.details = Determines if week numbers should be displayed on the calendar.
week_numbers.link    = https://fullcalendar.io/docs/weekNumbers
week_numbers.name    = Week numbers
week_numbers.value   = $.extend(this.cfg.options, {\n    weekNumbers: true,\n    initialView: 'dayGridMonth'\n});

window_resize_delay.details = The time the calendar will wait to adjust its size after a window resize occurs, in milliseconds.
window_resize_delay.link    = https://fullcalendar.io/docs/windowResizeDelay
window_resize_delay.name    = Window resize delay
window_resize_delay.value   = $.extend(this.cfg.options, {\n    handleWindowResize: true,\n    windowResizeDelay: 500,\n});\n
