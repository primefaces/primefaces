<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="jakarta.faces.facelets"
                xmlns:h="jakarta.faces.html"
                xmlns:f="jakarta.faces.core"
                xmlns:p="primefaces"
                xmlns:pt="jakarta.faces.passthrough"
                template="/WEB-INF/template.xhtml">

    <ui:define name="head">
        <script>
            //<![CDATA[
            PrimeFaces.validator['MyComplexValidator'] = {

                validate: function(element) {
                    let nameRequiredPf = PF('nameRequired');
                    let namePf = PF('name');

                    if (nameRequiredPf.isChecked() && namePf.getValue().length === 0) {
                        PrimeFaces.validation.ValidationContext.highlight(namePf);
                        PrimeFaces.validation.ValidationContext.addMessage(namePf, { summary: 'Validation Error', detail: 'A name is required!' });
                    } else {
                        PrimeFaces.validation.ValidationContext.unhighlight(namePf);
                    }
                }
            };
            //]]>
        </script>
    </ui:define>


    <ui:define name="title">
        Client Side Validation <span class="subitem">Complex / Multi-Field</span>
    </ui:define>

    <ui:define name="description">
        This examples shows how you can implement complex validation on the clide side like conditional validation or "connected" validation over mulitple inputs.
        <br/> If you select "Name required", you have to set content in the "Name" input.
    </ui:define>

    <ui:param name="documentationLink" value="/core/csv"/>

    <ui:define name="implementation">
        <div class="card">
            <h:form id="form">
                <p:outputPanel pt:data-p-val="MyComplexValidator">
                    <p:messages showDetail="true">
                        <p:autoUpdate/>
                    </p:messages>

                    <h:panelGrid id="grid" columns="3" cellpadding="5">
                        <p:outputLabel for="@next" value="Name required"/>
                        <p:selectBooleanCheckbox id="nameRequired" widgetVar="nameRequired" value="#{complexValidationView.nameRequired}"/>
                        <p:message for="@previous"/>

                        <p:outputLabel for="@next" value="Name"/>
                        <p:inputText id="name" widgetVar="name" value="#{complexValidationView.name}" label="Name"/>
                        <p:message for="@previous"/>

                        <p:outputLabel for="@next" value="Accept Terms And Conditions"/>
                        <p:selectBooleanCheckbox id="terms" value="#{complexValidationView.acceptTermnsAndCondition}"/>
                        <p:message for="@previous"/>
                    </h:panelGrid>

                    <p:defaultCommand target="btnAjax"/>

                    <p:commandButton value="Non-Ajax" ajax="false" icon="pi pi-check" validateClient="true"
                                     action="#{complexValidationView.doNonAjax()}" style="margin-right:10px"/>
                    <p:commandButton value="Ajax" id="btnAjax" update="@form" icon="pi pi-check" validateClient="true"
                                     action="#{complexValidationView.doAjax()}" style="margin-right:10px"/>
                    <p:commandButton value="Disabled (without CSV)" ajax="false" icon="pi pi-check"
                                     action="#{complexValidationView.doNonAjaxWithoutCsv()}"  style="margin-right:10px"/>
                </p:outputPanel>
            </h:form>
        </div>
    </ui:define>

</ui:composition>
