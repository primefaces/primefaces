<ui:composition xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:p="http://primefaces.org/ui"
                xmlns:fn="http://java.sun.com/jsp/jstl/functions"
                template="/WEB-INF/template.xhtml">

    <ui:define name="title">
        Carousel
    </ui:define>

    <ui:define name="description">
        Carousel displays data using a slide effect.
    </ui:define>

    <ui:param name="documentationLink" value="/components/carousel"/>
    <ui:param name="widgetLink" value="carousel-1"/>

    <ui:define name="head">
        <style type="text/css">
            .product-item .product-item-content {
                border: 1px solid var(--surface-d);
                border-radius: 3px;
                margin: .3rem;
                text-align: center;
                padding: 2rem 0;
            }

            .product-item .product-image {
                width: 50%;
                box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23)
            }

            .ui-carousel .ui-carousel-content .ui-carousel-prev,
            .ui-carousel .ui-carousel-content .ui-carousel-next {
                width: 2rem;
                height: 2rem;
                color: #6c757d;
                border: 0 none;
                background: transparent;
                border-radius: 50%;
                transition: background-color 0.2s, color 0.2s, box-shadow 0.2s;
                margin: 0.5rem;
            }
            .ui-carousel .ui-carousel-content .ui-carousel-prev:enabled:hover,
            .ui-carousel .ui-carousel-content .ui-carousel-next:enabled:hover {
                color: #495057;
                border-color: transparent;
                background: #e9ecef;
            }
            .ui-carousel .ui-carousel-content .ui-carousel-prev:focus,
            .ui-carousel .ui-carousel-content .ui-carousel-next:focus {
                outline: 0 none;
                outline-offset: 0;
                box-shadow: 0 0 0 0.2rem #a6d5fa;
            }
            .ui-carousel .ui-carousel-indicators {
                padding: 1rem;
            }
            .ui-carousel .ui-carousel-indicators .ui-carousel-indicator {
                margin-right: 0.5rem;
                margin-bottom: 0.5rem;
            }
            .ui-carousel .ui-carousel-indicators .ui-carousel-indicator button {
                background-color: #e9ecef;
                width: 2rem;
                height: 0.5rem;
                transition: background-color 0.2s, color 0.2s, box-shadow 0.2s;
                border-radius: 0;
            }
            .ui-carousel .ui-carousel-indicators .ui-carousel-indicator button:hover {
                background: #dee2e6;
            }
            .ui-carousel .ui-carousel-indicators .ui-carousel-indicator.ui-highlight button {
                background: #E3F2FD;
                color: #495057;
            }
            .ui-carousel .ui-carousel-indicators .ui-carousel-indicator.ui-highlight button {
                background-color: #2196F3;
            }

            .ui-galleria .ui-galleria-indicators .ui-galleria-indicator.ui-highlight button {
                background-color: #2196F3;
            }
        </style>

        <script type="text/javascript">
            //<![CDATA[
            /**
             * __PrimeFaces Carousel Widget__
             * Carousel is a multi purpose component to display a set of data or general content with slide effects.
             *
             * @interface {PrimeFaces.widget.CarouselCfg} cfg The configuration for the {@link  Carousel| Carousel widget}.
             * You can access this configuration via {@link PrimeFaces.widget.BaseWidget.cfg|BaseWidget.cfg}. Please note that this
             * configuration is usually meant to be read-only and should not be modified.
             * @extends {PrimeFaces.widget.DeferredWidgetCfg} cfg
             *
             * @prop {number} cfg.page Index of the first item.
             * @prop {boolean} cfg.circular Sets continuous scrolling
             * @prop {number} cfg.autoplayInterval Sets the time in milliseconds to have Carousel start scrolling automatically
             * after being initialized.
             * @prop {number} cfg.numVisible Number of visible items per page
             * @prop {number} cfg.numScroll Number of items to scroll
             * @prop {Array.<{breakpoint:string, numVisible:number, numScroll:number}>} an array of options for responsive design
             * @prop {string} cfg.orientation Specifies the layout of the component, valid layouts are horizontal or vertical
             *
             */
            PrimeFaces.widget.Carousel = PrimeFaces.widget.DeferredWidget.extend({

                /**
                 * @override
                 * @inheritdoc
                 * @param {PrimeFaces.PartialWidgetCfg<TCfg>} cfg
                 */
                init: function(cfg) {
                    this._super(cfg);
                    this.content = this.jq.children('.ui-carousel-content');
                    this.container = this.content.children('.ui-carousel-container');
                    this.itemsContent = this.container.children('.ui-carousel-items-content');
                    this.indicatorsContainer = this.content.children('.ui-carousel-indicators');
                    this.itemsContainer = this.itemsContent.children('.ui-carousel-items-container');
                    this.items = this.itemsContainer.children('.ui-carousel-item');
                    this.itemsCount = this.items.length;
                    this.prevNav = this.container.children('.ui-carousel-prev');
                    this.nextNav = this.container.children('.ui-carousel-next');

                    this.cfg.page = this.cfg.page || 0;
                    this.cfg.numVisible = this.cfg.numVisible || 1;
                    this.cfg.numScroll = this.cfg.numScroll || 1;
                    this.cfg.responsiveOptions = this.cfg.responsiveOptions || [];
                    this.cfg.orientation = this.cfg.orientation || 'horizontal';
                    this.cfg.circular = this.cfg.circular || false;
                    this.cfg.autoplayInterval = this.cfg.autoplayInterval || 0;

                    this.remainingItems = 0;
                    this.isRemainingItemsAdded = false;
                    this.numVisible = this.cfg.numVisible;
                    this.numScroll = this.cfg.numScroll;
                    this.oldNumScroll = 0;
                    this.oldNumVisible = 0;
                    this.page = this.cfg.page;
                    this.totalShiftedItems = this.getTotalShiftedItems();
                    this.allowAutoplay = !!this.cfg.autoplayInterval;
                    this.circular = this.cfg.circular || this.allowAutoplay;
                    this.swipeThreshold = 20;
                    this.totalIndicators = this.getTotalIndicators();
                    this.isCircular = this.itemsCount !== 0 && this.circular && this.itemsCount >= this.numVisible;
                    this.isVertical = this.cfg.orientation === 'vertical';
                    this.isAutoplay = this.cfg.autoplayInterval && this.allowAutoplay;

                    this.renderDeferred();
                },

                updatePage: function() {
                    this.initPageState();
                    this.updateNavigators();
                    this.updateIndicators();
                    this.styleActiveItems();
                },

                initPageState: function() {
                    this.totalIndicators = this.getTotalIndicators();
                    var stateChanged = false;
                    var totalShiftedItems = this.totalShiftedItems;

                    if (this.cfg.autoplayInterval) {
                        this.stopAutoplay();
                    }

                    if(this.oldNumScroll !== this.numScroll || this.oldNumVisible !== this.numVisible) {
                        this.remainingItems = (this.itemsCount - this.numVisible) % this.numScroll;

                        var page = this.page;
                        if (this.totalIndicators !== 0 && page >= this.totalIndicators) {
                            page = this.totalIndicators - 1;
                            this.page = page;

                            stateChanged = true;
                        }

                        totalShiftedItems = (page * this.numScroll) * -1;
                        if (this.isCircular) {
                            totalShiftedItems -= this.numVisible;
                        }

                        if (page === (this.totalIndicators - 1) && this.remainingItems > 0) {
                            totalShiftedItems += (-1 * this.remainingItems) + this.numScroll;
                            this.isRemainingItemsAdded = true;
                        }
                        else {
                            this.isRemainingItemsAdded = false;
                        }

                        if (totalShiftedItems !== this.totalShiftedItems) {
                            this.totalShiftedItems = totalShiftedItems;

                            stateChanged = true;
                        }

                        this.oldNumScroll = this.numScroll;
                        this.oldNumVisible = this.numVisible;

                        this.changePosition(totalShiftedItems);
                    }

                    if (this.isCircular) {
                        if (this.page === 0) {
                            totalShiftedItems = -1 * this.numVisible;
                        }
                        else if (totalShiftedItems === 0) {
                            totalShiftedItems = -1 * this.itemsCount;
                            if (this.remainingItems > 0) {
                                this.isRemainingItemsAdded = true;
                            }
                        }

                        if (totalShiftedItems !== this.totalShiftedItems) {
                            this.totalShiftedItems = totalShiftedItems;

                            stateChanged = true;
                        }
                    }

                    if (!stateChanged && this.isAutoplay) {
                        this.startAutoplay();
                    }

                    if (stateChanged) {
                        this.initPageState();
                    }
                },

                /**
                 * @include
                 * @override
                 * @inheritdoc
                 * @protected
                 */
                _render: function() {
                    this.createStyle();

                    if (this.cfg.circular) {
                        this.cloneItems();
                    }

                    this.calculatePosition();
                    this.updatePage();
                    this.bindEvents();

                    if (this.cfg.responsiveOptions) {
                        this.bindDocumentListeners();
                    }
                },

                /**
                 * Sets up all event listeners required by this widget.
                 * @private
                 */
                bindEvents: function () {
                    var $this = this;

                    var indicatorSelector = '.ui-carousel-indicator';
                    this.indicatorsContainer.off('click.indicator', indicatorSelector).on('click.indicator', indicatorSelector, null, function (e) {
                        var index = $(this).index();
                        $this.onIndicatorClick(e, index);
                    });
                    this.prevNav.on('click', function(e) {
                        $this.navBackward(e);
                    });
                    this.nextNav.on('click', function(e) {
                        $this.navForward(e);
                    });
                    this.itemsContainer.on('transitionend', function() {
                        $this.onTransitionEnd();
                    });
                    if (PrimeFaces.env.isTouchable(this.cfg)) {
                        if (this.isVertical) {
                            this.itemsContainer.swipe({
                                swipeUp:function(e) {
                                    $this.navBackward(e);
                                },
                                swipeDown: function(e) {
                                    $this.navForward(e);
                                },
                                excludedElements: PrimeFaces.utils.excludedSwipeElements()
                            });
                        }

                        else {
                            this.itemsContainer.swipe({
                                swipeLeft:function(e) {
                                    $this.navBackward(e);
                                },
                                swipeRight: function(e) {
                                    $this.navForward(e);
                                },
                                excludedElements: PrimeFaces.utils.excludedSwipeElements()
                            });
                        }
                    }
                },

                changePosition: function(totalShiftedItems) {
                    if (this.itemsContainer) {
                        this.itemsContainer.get(0).style.transform = this.isVertical ? 'translate3d(0,' + totalShiftedItems * (100/ this.numVisible) + '%, 0)' : 'translate3d(' + totalShiftedItems * (100/ this.numVisible) + '%, 0, 0)';
                    }
                },

                step: function(dir, page) {
                    var totalShiftedItems = this.totalShiftedItems;
                    var isCircular = this.isCircular;

                    if (page != null) {
                        totalShiftedItems = (this.numScroll * page) * -1;

                        if (isCircular) {
                            totalShiftedItems -= this.numVisible;
                        }

                        this.isRemainingItemsAdded = false;
                    }
                    else {
                        totalShiftedItems += (this.numScroll * dir);

                        if (this.isRemainingItemsAdded) {
                            totalShiftedItems += this.remainingItems - (this.numScroll * dir);
                            this.isRemainingItemsAdded = false;
                        }

                        var originalShiftedItems = isCircular ? (totalShiftedItems + this.numVisible) : totalShiftedItems;
                        page = Math.abs(Math.floor(originalShiftedItems / this.numScroll));
                    }

                    if (isCircular && this.page === (this.totalIndicators - 1) && dir === -1) {
                        totalShiftedItems = -1 * (this.itemsCount + this.numVisible);
                        page = 0;
                    }
                    else if (isCircular && this.page === 0 && dir === 1) {
                        totalShiftedItems = 0;
                        page = (this.totalIndicators - 1);
                    }
                    else if (page === (this.totalIndicators - 1) && this.remainingItems > 0) {
                        totalShiftedItems += ((this.remainingItems * -1) - (this.numScroll * dir));
                        this.isRemainingItemsAdded = true;
                    }

                    if (this.itemsContainer) {
                        this.itemsContainer.removeClass('ui-items-hidden');
                        this.changePosition(totalShiftedItems);
                        this.itemsContainer.get(0).style.transition = 'transform 500ms ease 0s';
                    }

                    this.totalShiftedItems = totalShiftedItems;
                    this.page = page;

                    this.updatePage();
                },

                calculatePosition: function() {
                    var $this = this;

                    if (this.itemsContainer && this.cfg.responsiveOptions) {
                        var windowWidth = window.innerWidth;
                        var matchedResponsiveOptionsData = {
                            numVisible: $this.cfg.numVisible,
                            numScroll: $this.cfg.numScroll
                        };

                        for (var i = 0; i < this.cfg.responsiveOptions.length; i++) {
                            var res = this.cfg.responsiveOptions[i];

                            if (parseInt(res.breakpoint, 10) >= windowWidth) {
                                matchedResponsiveOptionsData = res;
                            }
                        }

                        var stateChanged = false;

                        if (this.numScroll !== matchedResponsiveOptionsData.numScroll) {
                            var page = this.page;
                            page = parseInt((page * this.numScroll) / matchedResponsiveOptionsData.numScroll);

                            this.totalShiftedItems = (matchedResponsiveOptionsData.numScroll * page) * -1;

                            if (this.isCircular) {
                                this.totalShiftedItems -= matchedResponsiveOptionsData.numVisible;
                            }

                            this.numScroll = matchedResponsiveOptionsData.numScroll;

                            this.page = page;
                            stateChanged = true;
                        }

                        if (this.numVisible !== matchedResponsiveOptionsData.numVisible) {
                            this.numVisible = matchedResponsiveOptionsData.numVisible;
                            stateChanged = true;
                        }

                        if (stateChanged) {
                            this.updatePage();

                            if (this.cfg.circular) {
                                this.cloneItems();
                            }
                        }
                    }
                },

                navBackward: function(e, index){
                    this.isAutoplay = false;

                    if (this.circular || this.page !== 0) {
                        this.step(1, index);
                    }

                    if (e.cancelable) {
                        e.preventDefault();
                    }
                },

                navForward: function(e, index){
                    this.isAutoplay = false;

                    if (this.circular || this.page < (this.totalIndicators - 1)) {
                        this.step(-1, index);
                    }

                    if (e.cancelable) {
                        e.preventDefault();
                    }
                },

                updateNavigators: function() {
                    var prevButton = this.prevNav,
                        nextButton = this.nextNav;

                    this.backwardIsDisabled()
                        ? PrimeFaces.utils.disableButton(prevButton)
                        : PrimeFaces.utils.enableButton(prevButton);

                    this.forwardIsDisabled()
                        ? PrimeFaces.utils.disableButton(nextButton)
                        : PrimeFaces.utils.enableButton(nextButton);
                },

                updateIndicators: function() {
                    this.indicatorsContainer.get(0).innerHTML = this.renderIndicators();
                    this.indicators = this.indicatorsContainer.children('li');
                },

                onIndicatorClick: function(e, index) {
                    var page = this.page;

                    if (index > page) {
                        this.navForward(e, index);
                    }
                    else if (index < page) {
                        this.navBackward(e, index);
                    }
                },

                onTransitionEnd: function() {
                    if (this.itemsContainer) {
                        this.itemsContainer.addClass('ui-items-hidden');
                        this.itemsContainer.get(0).style.transition = '';

                        if ((this.page === 0 || this.page === (this.totalIndicators - 1)) && this.isCircular) {
                            this.changePosition(this.totalShiftedItems);
                        }
                    }
                },

                bindDocumentListeners: function() {
                    if (!this.documentResizeListener) {
                        this.documentResizeListener = (e) => {
                            this.calculatePosition(e);
                        };

                        window.addEventListener('resize', this.documentResizeListener);
                    }
                },

                startAutoplay: function() {
                    var $this = this;
                    this.interval = setInterval(() => {
                            if($this.page === ($this.totalIndicators - 1)) {
                                $this.step(-1, 0);
                            }
                            else {
                                $this.step(-1, this.page + 1);
                            }
                        },
                        this.cfg.autoplayInterval);
                },

                stopAutoplay: function() {
                    if (this.interval) {
                        clearInterval(this.interval);
                    }
                },

                createStyle: function() {
                    if (!this.carouselStyle) {
                        this.carouselStyle = document.createElement('style');
                        this.carouselStyle.type = 'text/css';
                        document.body.appendChild(this.carouselStyle);
                    }

                    var innerHTML = 'div[id*="' + this.id + '"] .ui-carousel-item {flex: 1 0 ' + (100/ this.numVisible) + '%}';

                    if (this.cfg.responsiveOptions) {
                        var _responsiveOptions = this.cfg.responsiveOptions;
                        _responsiveOptions.sort((data1, data2) => {
                            var value1 = data1.breakpoint;
                            var value2 = data2.breakpoint;
                            var result = null;

                            if (value1 == null && value2 != null)
                                result = -1;
                            else if (value1 != null && value2 == null)
                                result = 1;
                            else if (value1 == null && value2 == null)
                                result = 0;
                            else if (typeof value1 === 'string' && typeof value2 === 'string')
                                result = value1.localeCompare(value2, undefined, { numeric: true });
                            else
                                result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;

                            return -1 * result;
                        });

                        for (var i = 0; i < _responsiveOptions.length; i++) {
                            var res = _responsiveOptions[i];

                            innerHTML += '@media screen and (max-width: ' + res.breakpoint + ') '
                                + '{div[id*="' + this.id + '"] .ui-carousel-item '
                                + '{flex: 1 0 ' + (100/ res.numVisible) + '%}}'
                        }
                    }

                    this.carouselStyle.innerHTML = innerHTML;
                },

                cloneItems: function () {
                    this.itemsContainer.children('.ui-carousel-item-cloned').remove();

                    var clonedElements = this.items.slice(-1 * this.numVisible).clone();
                    var cloneSize = clonedElements.length;
                    var i;
                    for (i = 0; i < cloneSize; i++) {
                        this.styleClone(clonedElements.eq(i), i, cloneSize);
                    }
                    this.itemsContainer.prepend(clonedElements);

                    clonedElements = this.items.slice(0, this.numVisible).clone();
                    cloneSize = clonedElements.length;
                    for (i = 0; i < cloneSize; i++) {
                        this.styleClone(clonedElements.eq(i), i, cloneSize);
                    }
                    this.itemsContainer.append(clonedElements);
                },

                styleClone: function (elem, index, length) {
                    elem.removeClass('ui-carousel-item-start ui-carousel-item-end');
                    elem.addClass('ui-carousel-item-cloned ui-carousel-item-active');
                    if (index === 0) {
                        elem.addClass('ui-carousel-item-start');
                    }
                    if (index + 1 === length) {
                        elem.addClass('ui-carousel-item-end');
                    }
                    elem.find('*').removeAttr('id');
                },

                styleActiveItems: function () {
                    var items = this.itemsContainer.children(':not(.ui-carousel-item-cloned)');
                    items.removeClass('ui-carousel-item-active ui-carousel-item-start ui-carousel-item-end');

                    var firstIndex = this.firstIndex(),
                        lastIndex = this.lastIndex();

                    for (var i = 0; i < items.length; i++) {
                        if (firstIndex <= i && lastIndex >= i) {
                            items.eq(i).addClass('ui-carousel-item-active');
                        }

                        if (firstIndex === i) {
                            items.eq(i).addClass('ui-carousel-item-start');
                        }

                        if (lastIndex === i) {
                            items.eq(i).addClass('ui-carousel-item-end');
                        }
                    }
                },

                renderIndicators: function() {
                    var indicatorsHtml = '';

                    for (var i = 0; i < this.totalIndicators; i++) {
                        indicatorsHtml += '<li class="ui-carousel-indicator ' + (this.page === i  ? 'ui-highlight' : '') + '"><button class="ui-link" type="button"></button></li>';
                    }

                    return indicatorsHtml;
                },

                getTotalShiftedItems: function() {
                    return this.page * this.cfg.numScroll * -1;
                },

                getTotalIndicators: function() {
                    return this.itemsCount !== 0 ? Math.ceil((this.itemsCount - this.numVisible) / this.numScroll) + 1 : 0;
                },

                backwardIsDisabled: function() {
                    return (this.itemsCount !== 0 && (!this.cfg.circular || this.itemsCount < this.numVisible) && this.page === 0);
                },

                forwardIsDisabled: function() {
                    return (this.itemsCount !== 0 && (!this.cfg.circular || this.itemsCount < this.numVisible) && (this.page === (this.totalIndicators - 1) || this.totalIndicators === 0));
                },

                firstIndex: function() {
                    return this.isCircular ? (-1 * (this.totalShiftedItems + this.numVisible)) : (this.totalShiftedItems * -1);
                },

                lastIndex: function() {
                    return (this.firstIndex() + this.numVisible - 1);
                }

            });
            //]]>
        </script>
    </ui:define>
    <ui:define name="implementation">

        <h:form id="form">

            <div class="card">
                <p:carousel value="#{carouselView.products}" var="product" numVisible="3" numScroll="3"
                            responsiveOptions="#{carouselView.responsiveOptions}">
                    <f:facet name="header">
                        <h5>Basic</h5>
                    </f:facet>
                    <div class="product-item">
                        <div class="product-item-content">
                            <div class="p-mb-3">
                                <p:graphicImage name="demo/images/product/#{product.image}" styleClass="product-image"/>
                            </div>
                            <div>
                                <h4 class="p-mb-1">#{product.name}</h4>
                                <h6 class="p-mt-0 p-mb-3">
                                    <h:outputText value="#{product.price}">
                                        <f:convertNumber type="currency" pattern="¤#0" currencySymbol="$" />
                                    </h:outputText>
                                </h6>
                                <span class="product-badge status-#{product.inventoryStatus.name().toLowerCase()}">#{product.inventoryStatus.text}</span>
                                <div class="p-mt-5">
                                    <p:commandButton type="button" icon="pi pi-search" styleClass="rounded-button p-mr-2" />
                                    <p:commandButton type="button" icon="pi pi-star" styleClass="ui-button-success rounded-button p-mr-2" />
                                    <p:commandButton type="button" icon="pi pi-cog" styleClass="ui-button-help rounded-button" />
                                </div>
                            </div>
                        </div>
                    </div>
                </p:carousel>
            </div>

            <div class="card">
                <p:carousel value="#{carouselView.products}" var="product" circular="true" autoplayInterval="3000"
                            responsiveOptions="#{carouselView.responsiveOptions}" numVisible="3" numScroll="1">
                    <f:facet name="header">
                        <h5>Circular, AutoPlay, 3 Items per Page and Scroll by 1</h5>
                    </f:facet>
                    <div class="product-item">
                        <div class="product-item-content">
                            <div class="p-mb-3">
                                <p:graphicImage name="demo/images/product/#{product.image}" styleClass="product-image"/>
                            </div>
                            <div>
                                <h4 class="p-mb-1">#{product.name}</h4>
                                <h6 class="p-mt-0 p-mb-3">
                                    <h:outputText value="#{product.price}">
                                        <f:convertNumber type="currency" pattern="¤#0" currencySymbol="$" />
                                    </h:outputText>
                                </h6>
                                <span class="product-badge status-#{product.inventoryStatus.name().toLowerCase()}">#{product.inventoryStatus.text}</span>
                                <div class="p-mt-5">
                                    <p:commandButton type="button" icon="pi pi-search" styleClass="rounded-button p-mr-2" />
                                    <p:commandButton type="button" icon="pi pi-star" styleClass="ui-button-success rounded-button p-mr-2" />
                                    <p:commandButton type="button" icon="pi pi-cog" styleClass="ui-button-help rounded-button" />
                                </div>
                            </div>
                        </div>
                    </div>
                </p:carousel>
            </div>

            <div class="card">
                <p:carousel value="#{carouselView.products}" var="product" orientation="vertical"
                            verticalViewPortHeight="352px" style="max-width: 400px;margin-top: 2em;">
                    <f:facet name="header">
                        <h5>Vertical</h5>
                    </f:facet>
                    <div class="product-item">
                        <div class="product-item-content">
                            <div class="p-mb-3">
                                <p:graphicImage name="demo/images/product/#{product.image}" styleClass="product-image"/>
                            </div>
                            <div>
                                <h4 class="p-mb-1">#{product.name}</h4>
                                <h6 class="p-mt-0 p-mb-3">
                                    <h:outputText value="#{product.price}">
                                        <f:convertNumber type="currency" pattern="¤#0" currencySymbol="$" />
                                    </h:outputText>
                                </h6>
                                <span class="product-badge status-#{product.inventoryStatus.name().toLowerCase()}">#{product.inventoryStatus.text}</span>
                                <div class="p-mt-5">
                                    <p:commandButton type="button" icon="pi pi-search" styleClass="rounded-button p-mr-2" />
                                    <p:commandButton type="button" icon="pi pi-star" styleClass="ui-button-success rounded-button p-mr-2" />
                                    <p:commandButton type="button" icon="pi pi-cog" styleClass="ui-button-help rounded-button" />
                                </div>
                            </div>
                        </div>
                    </div>
                </p:carousel>
            </div>
        </h:form>

    </ui:define>

</ui:composition>
