/** German */
PrimeFaces.locales ['de'] = {
    closeText: 'Schließen',
    prevText: 'Zurück',
    nextText: 'Weiter',
    monthNames: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember' ],
    monthNamesShort: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez' ],
    dayNames: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],
    dayNamesShort: ['Son', 'Mon', 'Die', 'Mit', 'Don', 'Fre', 'Sam'],
    dayNamesMin: ['S', 'M', 'D', 'M ', 'D', 'F ', 'S'],
    weekHeader: 'Woche',
    weekNumberTitle: 'W',
    firstDay: 1,
    isRTL: false,
    showMonthAfterYear: false,
    yearSuffix:'',
    timeOnlyTitle: 'Nur Zeit',
    timeText: 'Zeit',
    hourText: 'Stunde',
    minuteText: 'Minute',
    secondText: 'Sekunde',
    currentText: 'Aktuelles Datum',
    ampm: false,
    year: 'Jahr',
    month: 'Monat',
    week: 'Woche',
    day: 'Tag',
    list: 'Agenda',
    allDayText: 'Ganzer Tag',
    moreLinkText: 'Mehr...',
    noEventsText: 'Keine Einträge',
    today: 'Heute',
    clear: 'Löschen',
    aria: {
        'paginator.PAGE': 'Seite {0}',
        'calendar.BUTTON': 'Kalender anzeigen',
        'datatable.sort.ASC': 'Spalten aufsteigend sortieren',
        'datatable.sort.DESC': 'Spalten absteigend sortieren',
        'columntoggler.CLOSE': 'Schließen',
        'overlaypanel.CLOSE': 'Schließen'
    },
    messages: {  //optional for Client Side Validation
        'javax.faces.component.UIInput.REQUIRED': '{0}: Eingabe erforderlich.',
        'javax.faces.converter.IntegerConverter.INTEGER': '{2}: \'{0}\' muss eine Zahl mit einer oder mehr Ziffern sein.',
        'javax.faces.converter.IntegerConverter.INTEGER_detail': '{2}: \'{0}\' muss eine Zahl zwischen -2147483648 und 2147483647 sein. Beispiel: {1}',
        'javax.faces.converter.DoubleConverter.DOUBLE': '{2}: \'{0}\' muss eine Zahl mit einer oder mehr Ziffern sein.',
        'javax.faces.converter.DoubleConverter.DOUBLE_detail': '{2}: \'{0}\' muss eine Zahl zwischen 4.9E-324 und 7976931348623157E308 sein. Beispiel: {1}',
        'javax.faces.converter.BigDecimalConverter.DECIMAL': '{2}: \'{0}\' muss eine Dezimalzahl mit Vorzeichen sein.',
        'javax.faces.converter.BigDecimalConverter.DECIMAL_detail': '{2}: \'{0}\' muss eine Dezimalzahl mit Vorzeichen sein, die aus Null oder mehr Ziffern besteht, gefolgt von Dezimalstellen nach einem Punkt. Beispiel: {1}',
        'javax.faces.converter.BigIntegerConverter.BIGINTEGER': '{2}: \'{0}\' muss eine Zahl mit einer oder mehr Ziffern sein.',
        'javax.faces.converter.BigIntegerConverter.BIGINTEGER_detail': '{2}: \'{0}\' muss eine Zahl mit einer oder mehr Ziffern sein. Beispiel: {1}',
        'javax.faces.converter.ByteConverter.BYTE': '{2}: \'{0}\' muss eine Zahl zwischen 0 und 255 sein.',
        'javax.faces.converter.ByteConverter.BYTE_detail': '{2}: \'{0}\' muss eine Zahl zwischen 0 und 255 sein. Beispiel: {1}',
        'javax.faces.converter.CharacterConverter.CHARACTER': '{1}: \'{0}\' muss ein gültiges Zeichen sein.',
        'javax.faces.converter.CharacterConverter.CHARACTER_detail': '{1}: \'{0}\' muss ein gültiges ASCII-Zeichen sein.',
        'javax.faces.converter.ShortConverter.SHORT': '{2}: \'{0}\' muss eine Zahl mit einer oder mehr Ziffern sein',
        'javax.faces.converter.ShortConverter.SHORT_detail': '{2}: \'{0}\' muss eine Zahl zwischen -32768 und 32767 sein. Beispiel: {1}',
        'javax.faces.converter.BooleanConverter.BOOLEAN': '{1}: \'{0}\' muss \'wahr\' oder \'falsch\' sein.',
        'javax.faces.converter.BooleanConverter.BOOLEAN_detail': '{1}: \'{0}\' muss \'wahr\' oder \'falsch\' sein.  Ein Wert der nicht \'wahr\' ist wird zu \'falsch\'.',
        'javax.faces.validator.LongRangeValidator.MAXIMUM': '{1}: Der Wert ist größer als das Maximum von \'{0}\'.',
        'javax.faces.validator.LongRangeValidator.MINIMUM': '{1}: Der Wert ist kleiner als das Minimum von \'{0}\'.',
        'javax.faces.validator.LongRangeValidator.NOT_IN_RANGE': '{2}: Wert ist nicht innerhalb der Grenzen von {0} und {1}.',
        'javax.faces.validator.LongRangeValidator.TYPE={0}': 'Wert entsprecht nicht dem vorgegebenen Typ.',
        'javax.faces.validator.DoubleRangeValidator.MAXIMUM': '{1}: Der Wert ist größer als das erlaubte Maximum von \'{0}\'.',
        'javax.faces.validator.DoubleRangeValidator.MINIMUM': '{1}: Der Wert ist kleiner als das erlaubte Minimum von \'{0}\'.',
        'javax.faces.validator.DoubleRangeValidator.NOT_IN_RANGE': '{2}: Attribute nicht innerhalb der Grenzen von {0} und {1}.',
        'javax.faces.validator.DoubleRangeValidator.TYPE={0}': 'Der Wert entspricht nicht dem erwarteten Typ.',
        'javax.faces.converter.FloatConverter.FLOAT': '{2}: \'{0}\' muss eine Zahl mit einer oder mehr Ziffern sein.',
        'javax.faces.converter.FloatConverter.FLOAT_detail': '{2}: \'{0}\' muss eine Zahl zwischen 1.4E-45 und 3.4028235E38 sein. Beispiel: {1}',
        'javax.faces.converter.DateTimeConverter.DATE': '{2}: \'{0}\' kann nicht als Datum interpretiert werden.',
        'javax.faces.converter.DateTimeConverter.DATE_detail': '{2}: \'{0}\' kann nicht als Datum interpretiert werden. Beispiel: {1}',
        'javax.faces.converter.DateTimeConverter.TIME': '{2}: \'{0}\' kann nicht als Zeit interpretiert werden.',
        'javax.faces.converter.DateTimeConverter.TIME_detail': '{2}: \'{0}\' kann nicht als Zeit interpretiert werden. Beispiel: {1}',
        'javax.faces.converter.DateTimeConverter.DATETIME': '{2}: \'{0}\' kann nicht als Datum oder Zeit interpretiert werden.',
        'javax.faces.converter.DateTimeConverter.DATETIME_detail': '{2}: \'{0}\' kann nicht als Datum oder Zeit interpretiert werden. Beispiel: {1}',
        'javax.faces.converter.DateTimeConverter.PATTERN_TYPE': '{1}: Ein \'pattern\' der \'type\' Attribute muss angegeben werden um den Wert \'{0}\' zu konvertieren.', 
        'javax.faces.converter.NumberConverter.CURRENCY': '{2}: \'{0}\' kann nicht als Währung interpretiert werden.',
        'javax.faces.converter.NumberConverter.CURRENCY_detail': '{2}: \'{0}\' kann nicht als Währung interpretiert werden. Beispiel: {1}',
        'javax.faces.converter.NumberConverter.PERCENT': '{2}: \'{0}\' kann nicht als Prozent interpretiert werden.',
        'javax.faces.converter.NumberConverter.PERCENT_detail': '{2}: \'{0}\' kann nicht als Prozent interpretiert werden. Beispiel: {1}',
        'javax.faces.converter.NumberConverter.NUMBER': '{2}: \'{0}\' kann nicht als Zahl interpretiert werden.',
        'javax.faces.converter.NumberConverter.NUMBER_detail': '{2}: \'{0}\' kann nicht als Zahl interpretiert werden. Beispiel: {1}',
        'javax.faces.converter.NumberConverter.PATTERN': '{2}: \'{0}\' kann nicht als Muster interpretiert werden.',
        'javax.faces.converter.NumberConverter.PATTERN_detail': '{2}: \'{0}\' kann nicht als Muster interpretiert werden. Beispiel: {1}',
        'javax.faces.validator.LengthValidator.MINIMUM': '{1}: Die Länge ist kleiner als das Minimum von \'{0}\'.',
        'javax.faces.validator.LengthValidator.MAXIMUM': '{1}: die Länge ist größer als das Maximum von \'{0}\'.',
        'javax.faces.validator.RegexValidator.PATTERN_NOT_SET': 'Ein regulärer Ausdruck darf nicht leer sein.',
        'javax.faces.validator.RegexValidator.PATTERN_NOT_SET_detail': 'Ein regulärer Ausdruck darf nicht leer sein.',
        'javax.faces.validator.RegexValidator.NOT_MATCHED': 'Das Muster stimmt nicht überein.',
        'javax.faces.validator.RegexValidator.NOT_MATCHED_detail': 'Das Muster \'{0}\' des regulären Ausdruck stimmt nicht überein.',
        'javax.faces.validator.RegexValidator.MATCH_EXCEPTION': 'Fehler im regulären Ausdruck.',
        'javax.faces.validator.RegexValidator.MATCH_EXCEPTION_detail': 'Fehler im regulären Ausdruck, \'{0}\'.',
        //optional for bean validation integration in client side validation
        'javax.faces.validator.BeanValidator.MESSAGE': '{0}',
        'javax.validation.constraints.AssertFalse.message': 'Muss falsch sein',
        'javax.validation.constraints.AssertTrue.message': 'Muss wahr sein',
        'javax.validation.constraints.DecimalMax.message': 'Muss kleiner oder gleich {0} sein',
        'javax.validation.constraints.DecimalMin.message': 'Muss größer oder gleich {0} sein',
        'javax.validation.constraints.Digits.message': 'Zahl außerhalb der Grenzen. (<{0} Ziffern>.<{1} Ziffern> möglich)',
        'javax.validation.constraints.Future.message': 'Muss in der Zukunft liegen',
        'javax.validation.constraints.Max.message': 'Muss kleiner oder gleich {0} sein',
        'javax.validation.constraints.Min.message': 'Muss größer oder gleich {0} sein',
        'javax.validation.constraints.NotNull.message': 'darf nicht Null sein',
        'javax.validation.constraints.Null.message': 'Muss Null sein',
        'javax.validation.constraints.Past.message': 'Muss in der Vergangenheit liegen',
        'javax.validation.constraints.Pattern.message': 'Muss gleich "{0}" sein',
        'javax.validation.constraints.Size.message': 'Größe muss zwischen {0} und {1} liegen'
    }
};